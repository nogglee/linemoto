import React, { useState, useEffect } from "react";
import { getProducts } from "../../api/products";
import { fetchMemberInfo } from "../../api/members";
import PaymentPanel from "./PaymentPanel";
import { toast } from "react-toastify";
import { useOutletContext } from "react-router-dom";

const POS = (user) => {
  const [products, setProducts] = useState([]);
  const [selectedProducts, setSelectedProducts] = useState([]);
  const [selectedMember, setSelectedMember] = useState(null);
  const [usedPoints, setUsedPoints] = useState(0);
  const [categories, setCategories] = useState(["Í∏∞ÌÉÄ"]);
  const [selectedCategory, setSelectedCategory] = useState("Í∏∞ÌÉÄ");

  // ÏÉÅÌíà Î™©Î°ù Î∂àÎü¨Ïò§Í∏∞ Î∞è Ïπ¥ÌÖåÍ≥†Î¶¨ ÏÑ∏ÌåÖ
  useEffect(() => {
    const fetchProducts = async () => {
      const data = await getProducts();
      setProducts(data);
    
      // üîπ DBÏóêÏÑú Í∞ÄÏ†∏Ïò® Ïπ¥ÌÖåÍ≥†Î¶¨Îßå ÏÇ¨Ïö© (Í∏∞Î≥∏Í∞í Ï∂îÍ∞Ä X)
      const uniqueCategories = [...new Set(data.map((product) => product.category))];
    
      setCategories(uniqueCategories); // ‚úÖ "Í∏∞ÌÉÄ" Í∏∞Î≥∏ Ï∂îÍ∞Ä X
    };
    fetchProducts();
  }, []);

  // Í≤∞Ï†ú Ìå®ÎÑêÏóê ÏÉÅÌíà Ï∂îÍ∞Ä Î∞è Ïû¨Í≥† ÏàòÎüâÏóê Îî∞Î•∏ ÌÜ†Ïä§Ìä∏ ÎÖ∏Ï∂ú
  const addToCart = (product) => {
    setSelectedProducts((prev) => {
      const existingItem = prev.find((item) => item.id === product.id);
      if (existingItem) {
        if (existingItem.quantity >= product.stock) {
          // Ïù¥ÎØ∏ ÌÜ†Ïä§Ìä∏Í∞Ä ÌëúÏãúÎêòÏóàÎäîÏßÄ ÌôïÏù∏ÌïòÍ±∞ÎÇò, 
          // Îã®ÏàúÌûà return prev; (Ìïú Î≤àÎßå Ìò∏Ï∂úÎêòÎèÑÎ°ù)
          toast.error("Ïû¨Í≥† ÏàòÎüâÏùÑ Ï¥àÍ≥ºÌïòÏòÄÏäµÎãàÎã§.", { toastId: `stock-${product.id}` });
          return prev;
        }
        return prev.map((item) =>
          item.id === product.id ? { ...item, quantity: item.quantity + 1 } : item
        );
      } else {
        if (product.stock <= 0) {
          toast.error("ÌíàÏ†àÎêú ÏÉÅÌíàÏûÖÎãàÎã§.", { toastId: `soldout-${product.id}` });
          return prev;
        }
        return [...prev, { ...product, quantity: 1 }];
      }
    });
  };

  // Ïû•Î∞îÍµ¨ÎãàÏóêÏÑú ÏÉÅÌíà ÏàòÎüâ Í∞êÏÜå Ïãú ÏïÑÏù¥ÌÖú ÏÇ≠Ï†ú
  const removeFromCart = (product) => {
    setSelectedProducts((prev) =>
      prev
        .map((item) =>
          item.id === product.id ? { ...item, quantity: item.quantity - 1 } : item
        )
        .filter((item) => item.quantity > 0)
    );
  };

  // ÌöåÏõê ÏÑ†ÌÉù
  const handleSelectMember = async (memberId) => {
    const memberInfo = await fetchMemberInfo(memberId);
    setSelectedMember(memberInfo);
  };

  // Ìè¨Ïù∏Ìä∏ ÏÇ¨Ïö© ÏûÖÎ†•
  const handlePointChange = (e) => {
    const value = Number(e.target.value);
    if (value <= (selectedMember?.points || 0)) {
      setUsedPoints(value);
    }
  };

  return (
    <div className="flex h-full w-full rounded-3xl bg-gray-50 border-gray-200 border-[1px] overflow-hidden font-body">
      <div className="w-full p-8">
        <div className="flex border-b border-gray-300 mb-4 text-2xl">
          {categories.map((category) => (
            <button
              key={category}
              className={`py-3 px-6 text-gray-500 hover:text-gray-950 font-medium whitespace-nowrap ${
                selectedCategory === category ? "border-b-2 border-black text-gray-950 font-bold" : ""
              }`}
              onClick={() => setSelectedCategory(category)}
            >
              {category}
            </button>
          ))}
        </div>

        <div
          className="grid w-full gap-1 md:gap-2 lg:gap-10"
          style={{ display: "grid", gridTemplateColumns: "repeat(auto-fill, minmax(150px, 1fr))" }}
        >
            {products
              .filter((product) =>
                selectedCategory === "Í∏∞ÌÉÄ" ? product.category === "Í∏∞ÌÉÄ" : product.category === selectedCategory
              )
              .map((product) => (
                <button
                  key={product.id}
                  disabled={product.stock === 0}
                  className={`border p-4 rounded-xl shadow flex flex-col justify-between items-start w-[140px] md:w-[160px] lg:w-[180px] aspect-square ${
                    product.stock === 0 ? "bg-gray-300 text-white cursor-not-allowed" : "bg-white"
                  }`}
                  onClick={() => addToCart(product)}
                >
                  <h3 className="text-lg font-semibold text-left">{product.name}</h3>
                  {product.stock === 0 ? (
                    <p className="font-bold">ÌíàÏ†à</p>
                  ) : (
                    <p className="text-lg">{product.price.toLocaleString()} Ïõê</p>
                  )}
                </button>
              ))}
        </div>
      </div>

      <PaymentPanel
        cartItems={selectedProducts}
        setCartItems={setSelectedProducts}
        addToCart={addToCart}
        removeFromCart={removeFromCart}
        selectedMember={selectedMember}
        setSelectedMember={setSelectedMember}
        usedPoints={usedPoints}
        setUsedPoints={setUsedPoints}
        handleSelectMember={handleSelectMember}
        handlePointChange={handlePointChange}
        admin={user} 
      />
    </div>
  );
};

export default POS;